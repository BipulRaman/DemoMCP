@MCP.sse_HostAddress = http://localhost:5227

###
# Health Check
GET {{MCP.http_HostAddress}}/health
Accept: application/json

###
# Server Information
GET {{MCP.http_HostAddress}}/
Accept: application/json

###
# MCP Protocol - Initialize (JSON-RPC 2.0)
POST {{MCP.http_HostAddress}}/mcp
Content-Type: application/json

{
  "jsonrpc": "2.0",
  "id": 1,
  "method": "initialize",
  "params": {
    "protocolVersion": "2024-11-05",
    "capabilities": {
      "streaming": {
        "supported": true,
        "protocols": ["chunked-json"]
      }
    },
    "clientInfo": {
      "name": "Test Client",
      "version": "1.0.0"
    }
  }
}

###
# MCP Protocol - List Tools
POST {{MCP.http_HostAddress}}/mcp
Content-Type: application/json

{
  "jsonrpc": "2.0",
  "id": 2,
  "method": "tools/list"
}

###
# MCP Protocol - List Prompts
POST {{MCP.http_HostAddress}}/mcp
Content-Type: application/json

{
  "jsonrpc": "2.0",
  "id": 6,
  "method": "prompts/list"
}

###
# MCP Protocol - Get Restaurant Recommendation Prompt
POST {{MCP.http_HostAddress}}/mcp
Content-Type: application/json

{
  "jsonrpc": "2.0",
  "id": 7,
  "method": "prompts/get",
  "params": {
    "name": "restaurant_recommendation",
    "arguments": {
      "cuisine_type": "Italian",
      "location_preference": "West Hollywood"
    }
  }
}

###
# MCP Protocol - List Resources
POST {{MCP.http_HostAddress}}/mcp
Content-Type: application/json

{
  "jsonrpc": "2.0",
  "id": 8,
  "method": "resources/list"
}

###
# MCP Protocol - Get Restaurants (Standard)
POST {{MCP.http_HostAddress}}/mcp
Content-Type: application/json

{
  "jsonrpc": "2.0",
  "id": 3,
  "method": "tools/call",
  "params": {
    "name": "get_restaurants"
  }
}

###
# MCP Protocol - Add Restaurant
POST {{MCP.http_HostAddress}}/mcp
Content-Type: application/json

{
  "jsonrpc": "2.0",
  "id": 4,
  "method": "tools/call",
  "params": {
    "name": "add_restaurant",
    "arguments": {
      "name": "Test Streaming Restaurant",
      "location": "123 Test St",
      "foodType": "Test Cuisine"
    }
  }
}

###
# MCP Protocol - Pick Random Restaurant
POST {{MCP.http_HostAddress}}/mcp
Content-Type: application/json

{
  "jsonrpc": "2.0",
  "id": 5,
  "method": "tools/call",
  "params": {
    "name": "pick_random_restaurant"
  }
}

###
# MCP Protocol - Get Visit Stats
POST {{MCP.http_HostAddress}}/mcp
Content-Type: application/json

{
  "jsonrpc": "2.0",
  "id": 9,
  "method": "tools/call",
  "params": {
    "name": "get_visit_stats"
  }
}

###
# HTTP GET - Initialize (Direct HTTP)
GET {{MCP.http_HostAddress}}/mcp/initialize
Accept: application/json

###
# HTTP GET - List Tools (Direct HTTP)
GET {{MCP.http_HostAddress}}/mcp/tools
Accept: application/json

###
# HTTP GET - Streaming Capabilities
GET {{MCP.http_HostAddress}}/mcp/capabilities
Accept: application/json

###
# STREAMING - Get Restaurants Stream (Auto-detection via tool name)
POST {{MCP.http_HostAddress}}/mcp
Content-Type: application/json

{
  "jsonrpc": "2.0",
  "id": 10,
  "method": "tools/call",
  "params": {
    "name": "get_restaurants_stream"
  }
}

###
# STREAMING - Get Restaurants Stream (Explicit streaming parameter)
POST {{MCP.http_HostAddress}}/mcp
Content-Type: application/json

{
  "jsonrpc": "2.0",
  "id": 11,
  "method": "tools/call",
  "params": {
    "name": "get_restaurants_stream",
    "streaming": true
  }
}

###
# STREAMING - Analyze Restaurants Stream (With arguments)
POST {{MCP.http_HostAddress}}/mcp
Content-Type: application/json

{
  "jsonrpc": "2.0",
  "id": 12,
  "method": "tools/call",
  "params": {
    "name": "analyze_restaurants_stream",
    "arguments": {
      "type": "comprehensive"
    }
  }
}

###
# STREAMING - Search Restaurants Stream
POST {{MCP.http_HostAddress}}/mcp
Content-Type: application/json

{
  "jsonrpc": "2.0",
  "id": 13,
  "method": "tools/call",
  "params": {
    "name": "search_restaurants_stream",
    "arguments": {
      "query": "mexican"
    }
  }
}

###
# STREAMING - Force streaming with header (for regular tools)
POST {{MCP.http_HostAddress}}/mcp
Content-Type: application/json
Accept-Streaming: chunked-json

{
  "jsonrpc": "2.0",
  "id": 14,
  "method": "tools/call",
  "params": {
    "name": "get_restaurants",
    "streaming": true
  }
}

###
# STREAMING - Force streaming with X-MCP-Streaming header
POST {{MCP.http_HostAddress}}/mcp
Content-Type: application/json
X-MCP-Streaming: true

{
  "jsonrpc": "2.0",
  "id": 15,
  "method": "tools/call",
  "params": {
    "name": "analyze_restaurants_stream",
    "arguments": {
      "type": "detailed"
    }
  }
}

###
